source(output(
		SalesOrderID as integer,
		RevisionNumber as integer,
		OrderDate as timestamp,
		DueDate as timestamp,
		ShipDate as timestamp,
		Status as integer,
		OnlineOrderFlag as boolean,
		SalesOrderNumber as string,
		PurchaseOrderNumber as string,
		AccountNumber as string,
		CustomerID as integer,
		ShipToAddressID as integer,
		BillToAddressID as integer,
		ShipMethod as string,
		CreditCardApprovalCode as string,
		SubTotal as decimal(19,4),
		TaxAmt as decimal(19,4),
		Freight as decimal(19,4),
		TotalDue as decimal(19,4),
		Comment as string,
		rowguid as string,
		ModifiedDate as timestamp
	),
	allowSchemaDrift: true,
	validateSchema: false,
	ignoreNoFilesFound: false,
	format: 'delta',
	fileSystem: 'lakehouse',
	folderPath: 'tables/OrderHeader') ~> OrderHeader
source(output(
		SalesOrderID as integer,
		SalesOrderDetailID as integer,
		OrderQty as integer,
		ProductID as integer,
		UnitPrice as decimal(19,4),
		UnitPriceDiscount as decimal(19,4),
		LineTotal as decimal(38,6),
		rowguid as string,
		ModifiedDate as timestamp
	),
	allowSchemaDrift: true,
	validateSchema: false,
	ignoreNoFilesFound: false,
	format: 'delta',
	fileSystem: 'lakehouse',
	folderPath: 'tables/OrderDetailLines') ~> OrderDetailLines
OrderHeader, OrderDetailLines join(OrderHeader@SalesOrderID == OrderDetailLines@SalesOrderID,
	joinType:'inner',
	broadcast: 'auto')~> Join1
Join1 aggregate(groupBy(SalesOrderNumber),
	RecordCount = count(SalesOrderDetailID)) ~> Aggregate1
Aggregate1 sink(allowSchemaDrift: true,
	validateSchema: false,
	format: 'delta',
	fileSystem: 'lakehouse',
	folderPath: 'tables/OrderAggregation',
	mergeSchema: false,
	autoCompact: false,
	optimizedWrite: false,
	vacuum: 0,
	deletable:false,
	insertable:true,
	updateable:false,
	upsertable:false,
	umask: 0022,
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	mapColumn(
		SalesOrderNumber,
		RecordCount
	)) ~> OrderAggregation